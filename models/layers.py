"""
Modules adapted from: https://github.com/VITA-Group/TransGAN/blob/master/models/TransGAN_8_8_1.py

"""

import torch
import torch.nn as nn
import math
import warnings
from torch import Tensor
from .ops import MatMul
from typing import Any


def get_activation(activation: str) -> nn.Module:

    if activation == 'gelu':
        return nn.GELU()
    if activation == 'relu':
        return nn.ReLU()
    if activation == 'leaky_relu':
        return nn.LeakyReLU(0.2)
    if activation == 'sigmoid':
        return nn.Sigmoid()
    if activation == 'tanh':
        return nn.Tanh()

    return nn.GELU()


def get_attention_mask(num_tokens: int, window_size: int) -> Tensor:
    """
    This function computes masks for the self attention module. The mask allows every token to attend to its local
    region defined by the window size parameter. That is, token i will be able to attend to token j such that distance
    between i and j is at most window size.
    Params:
    - num_tokens: number of tokens in attention computation
    - window_size: maximum distance between any two tokens to be able to attend to each other.
    """
    mask = torch.zeros(1, 1, num_tokens, num_tokens)
    for i in range(num_tokens):
        if i <= window_size:
            mask[:, :, i, 0:i + window_size + 1] = 1
        elif num_tokens - i <= window_size:
            mask[:, :, i, i - window_size:num_tokens] = 1
        else:
            mask[:, :, i, i:i + window_size + 1] = 1
            mask[:, :, i, i - window_size: i] = 1
    return mask


def pixel_upsample(x: Tensor, h: int, w: int):
    """
    Applies Pixel Shuffle method for upsampling as presented here: https://arxiv.org/pdf/1609.05158.pdf
    Params:
    - x: tensor of shape (B, N, C), where:
        - B: batch size
        - N: number of tokens
        - C: size of token dimension
    - h: original height of feature map
    - w: original width of feature map

    Expected Output Shape: (B, 4 * N, C / 4)
    """
    B, N, C = x.size()
    assert N == h * w
    x = x.permute(0, 2, 1)  # -> (B, C, N)
    x = x.view(-1, C, h, w)  # -> (B, C, H, W)
    x = nn.PixelShuffle(2)(x)  # -> (B, C / 4, 2 * H, 2 * W)
    B, C, H, W = x.size()
    x = x.view(-1, C, H*W)  # -> (B, C / 4, 4 * N)
    x = x.permute(0, 2, 1)  # -> (B, 4 * N, C / 4)
    return x, H, W


def _no_grad_trunc_normal_(tensor: Tensor, mean: float, std: float, a: float, b: float):
    """
    Cut & paste from PyTorch official master until it's in a few official releases - RW
    Method based on https://people.sc.fsu.edu/~jburkardt/presentations/truncated_normal.pdf
    """
    def norm_cdf(x):
        # Computes standard normal cumulative distribution function
        return (1. + math.erf(x / math.sqrt(2.))) / 2.

    if (mean < a - 2 * std) or (mean > b + 2 * std):
        warnings.warn("mean is more than 2 std from [a, b] in nn.init.trunc_normal_. "
                      "The distribution of values may be incorrect.", stacklevel=2)

    with torch.no_grad():
        # Values are generated by using a truncated uniform distribution and
        # then using the inverse CDF for the normal distribution.
        # Get upper and lower cdf values
        lower = norm_cdf((a - mean) / std)
        upper = norm_cdf((b - mean) / std)

        # Uniformly fill tensor with values from [l, u], then translate to
        # [2l-1, 2u-1].
        tensor.uniform_(2 * lower - 1, 2 * upper - 1)

        # Use inverse cdf transform for normal distribution to get truncated
        # standard normal
        tensor.erfinv_()

        # Transform to proper mean, std
        tensor.mul_(std * math.sqrt(2.))
        tensor.add_(mean)

        # Clamp to ensure it's in the proper range
        tensor.clamp_(min=a, max=b)
        return tensor


def trunc_normal_(tensor: Tensor, mean: float = 0., std: float = 1., a: float = -2., b: float = 2.):
    r"""Fills the input Tensor with values drawn from a truncated
    normal distribution. The values are effectively drawn from the
    normal distribution :math:`\mathcal{N}(\text{mean}, \text{std}^2)`
    with values outside :math:`[a, b]` redrawn until they are within
    the bounds. The method used for generating the random values works
    best when :math:`a \leq \text{mean} \leq b`.
    Args:
        tensor: an n-dimensional `torch.Tensor`
        mean: the mean of the normal distribution
        std: the standard deviation of the normal distribution
        a: the minimum cutoff value
        b: the maximum cutoff value
    Examples:
        >>> w = torch.empty(3, 5)
        >>> nn.init.trunc_normal_(w)
    """
    return _no_grad_trunc_normal_(tensor, mean, std, a, b)


def drop_path(x, drop_prob: float = 0., training: bool = False):
    """Drop paths (Stochastic Depth) per sample (when applied in main path of residual blocks).
    This is the same as the DropConnect impl I created for EfficientNet, etc networks, however,
    the original name is misleading as 'Drop Connect' is a different form of dropout in a separate paper...
    See discussion: https://github.com/tensorflow/tpu/issues/494#issuecomment-532968956 ... I've opted for
    changing the layer and argument names to 'drop path' rather than mix DropConnect as a layer name and use
    'survival rate' as the argument.
    """
    if drop_prob == 0. or not training:
        return x
    keep_prob = 1 - drop_prob
    shape = (x.shape[0],) + (1,) * (x.ndim - 1)  # work with diff dim tensors, not just 2D ConvNets
    random_tensor = keep_prob + torch.rand(shape, dtype=x.dtype, device=x.device)
    random_tensor.floor_()  # binarize
    output = x.div(keep_prob) * random_tensor
    return output


class DropPath(nn.Module):
    """Drop paths (Stochastic Depth) per sample  (when applied in main path of residual blocks).
    """
    def __init__(self, drop_prob=None):
        super(DropPath, self).__init__()
        self.drop_prob = drop_prob

    def forward(self, x):
        return drop_path(x, self.drop_prob, self.training)


class Mlp(nn.Module):
    def __init__(
            self,
            in_features: int,
            hidden_features: int = 0,
            out_features: int = 0,
            activation: str = 'gelu',
            drop: float = 0.0
    ):
        super().__init__()

        if hidden_features == 0:
            hidden_features = in_features

        if out_features == 0:
            out_features = in_features

        self.fc1 = nn.Linear(in_features, hidden_features)
        self.act = get_activation(activation)
        self.fc2 = nn.Linear(hidden_features, out_features)
        self.drop = nn.Dropout(drop)

    def forward(self, x: Tensor) -> Tensor:
        """
        Expected Input Shape: (B, *, in_features), where:
        - B: batch size
        - *: any number of dimensions
        - in_features : input features dimension

        Expected Output Shape: (B, *, out_features), where:
        - out_features: size of desired output features.
        """
        x = self.fc1(x)  # -> (B, *, hidden_size)
        x = self.act(x)  # -> (B, *, hidden_size)
        x = self.drop(x)  # -> (B, *, hidden_size)
        x = self.fc2(x)  # -> (B, *, out_dimension)
        x = self.drop(x)  # -> (B, *, out_dimension
        return x


class Attention(nn.Module):
    """
    Multihead self attention module with masking. The masking was introduced in TransGAN paper to apply locality-aware
    initialization for the self attention operations.
    Params:
    - token_dim: dimension size of input tokens
    - num_heads: number of heads for multi-head attention operation
    - qkv_bias: if true, bias term is added to the query-key-value projection operation
    - qk_scale: scale term for for scaled-dot product operation in attention
    - proj_drop: dropout probability for projection step
    - attn_drop: dropout probability after attention operation
    - is_mask: if non-zero, this denotes the number of input tokens for this layer and this value is used for computing
        the masks used for locality-aware initialization (see paper).
    """
    def __init__(
            self,
            token_dim: int,
            num_heads: int = 8,
            qkv_bias: bool = False,
            qk_scale=None,
            attn_drop: float = 0.0,
            proj_drop: float = 0.0,
            is_mask: int = 0
    ) -> None:
        super().__init__()

        self.num_heads = num_heads
        head_dim = token_dim // num_heads
        # NOTE scale factor was wrong in my original version, can set manually to be compat with prev weights
        self.scale = qk_scale or head_dim ** -0.5

        self.qkv = nn.Linear(token_dim, token_dim * 3, bias=qkv_bias)
        self.attn_drop = nn.Dropout(attn_drop)
        self.proj = nn.Linear(token_dim, token_dim)
        self.proj_drop = nn.Dropout(proj_drop)
        self.matmul = MatMul()
        self.is_mask = is_mask
        self.remove_mask = False

        self.mask_4 = get_attention_mask(is_mask, 4)
        self.mask_5 = get_attention_mask(is_mask, 5)
        self.mask_6 = get_attention_mask(is_mask, 6)
        self.mask_7 = get_attention_mask(is_mask, 7)
        self.mask_8 = get_attention_mask(is_mask, 8)
        self.mask_10 = get_attention_mask(is_mask, 10)

    def forward(self, x: Tensor, epoch: int) -> Tensor:
        """
        Expected Input Shape: (B, N, C), where:
        - B: batch size
        - N: number of tokens
        - C: dimension size of each token

        Number of epochs is given in order to change the type of attention mask used.
        TODO: make model get mask sizes and epoch times for change as parameter

        Expected output Shape (B, N, C)
        """
        B, N, C = x.shape

        qkv = self.qkv(x)  # -> (B, N, 3 * C)
        qkv = qkv.reshape(B, N, 3, self.num_heads, C // self.num_heads)  # -> (B, N, 3, num_heads, head_dim)
        qkv = qkv.permute(2, 0, 3, 1, 4)  # -> (3, B, num_heads, N, head_dim)
        # make torchscript happy (cannot use tensor as tuple)
        q, k, v = qkv[0], qkv[1], qkv[2]  # each is -> (B, num_heads, N, head_dim)

        attn = (self.mat(q, k.transpose(-2, -1))) * self.scale  # -> (B, num_heads, N, N)

        # apply masking depending on number of epochs
        if self.is_mask:
            if epoch < 60:
                if epoch < 22:
                    mask = self.mask_4
                elif epoch < 32:
                    mask = self.mask_6
                elif epoch < 42:
                    mask = self.mask_8
                else:
                    mask = self.mask_10
                attn = attn.masked_fill(mask.to(attn.get_device()) == 0, -1e9)  # -> (B, num_heads, N, N)
            else:
                pass
        attn = attn.softmax(dim=-1)  # -> (B, num_heads, N, N)
        attn = self.attn_drop(attn)  # -> (B, num_heads, N, N)

        x = self.matmul(attn, v)  # -> (B, num_heads, N, head_dim)
        x = x.transpose(1, 2)  # -> (B, N, num_heads, head_dim)
        x = x.reshape(B, N, C)  # -> (B, N, C)
        x = self.proj(x)  # -> (B, N, C)
        x = self.proj_drop(x)  # -> (B, N, C)

        return x


class Block(nn.Module):
    """
    This block represents teh transformer encoder block.
    Params:
    - token_dim: dimension size of input tokens
    - num_heads: number of heads for multi-head attention operation
    - mlp_ratio: used to compute the hidden size of MLP operations inside the transformer encoder blocks. The hidden
        size is equal to mlp_ratio * in_features.
    - qkv_bias: if true, bias term is added to the query-key-value projection operation
    - qk_scale: scale term for for scaled-dot product operation in attention
    - proj_drop: dropout probability for projection step
    - attn_drop: dropout probability after attention operation
    - activation: type of activation function to be used.
    - norm_layer: normalization layer, default is layer normalization
    - is_mask: if non-zero, this denotes the number of input tokens for this layer and this value is used for computing
        the masks used for locality-aware initialization (see paper).
    """
    def __init__(
            self,
            token_dim: int,
            num_heads: int,
            mlp_ratio: float = 4.,
            qkv_bias: bool = False,
            qk_scale=None,
            proj_drop: float = 0.,
            attn_drop: float = 0.,
            drop_path_prob: float = 0.,
            activation: str = 'gelu',
            norm_layer: Any = nn.LayerNorm,
            is_mask: int = 0
    ):
        super().__init__()
        self.attn = Attention(
            token_dim=token_dim,
            num_heads=num_heads,
            qkv_bias=qkv_bias,
            qk_scale=qk_scale,
            attn_drop=attn_drop,
            proj_drop=proj_drop,
            is_mask=is_mask

        )
        # NOTE: drop path for stochastic depth, we shall see if this is better than dropout here
        self.drop_path = DropPath(drop_path_prob) if drop_path_prob > 0. else nn.Identity()

        self.norm1 = norm_layer(token_dim)
        self.norm2 = norm_layer(token_dim)
        mlp_hidden_dim = int(token_dim * mlp_ratio)
        self.mlp = Mlp(in_features=token_dim, hidden_features=mlp_hidden_dim, activation=activation, drop=proj_drop)

    def forward(self, x, epoch):
        """
        Expected Input Shape: (B, N, C), where:
        - B: batch size
        - N: number of tokens
        - C: dimension size of token

        epoch param is necessary for locality-aware initialization for self attention, as the type of masked used
        depends on the number of reached epoch.

        Expected Output Shape: (B, N, C)
        """
        x = x + self.drop_path(self.attn(self.norm1(x), epoch))  # -> (B, N, C)
        x = x + self.drop_path(self.mlp(self.norm2(x)))  # (B, N, C)
        return x
